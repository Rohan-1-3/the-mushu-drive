generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DB_URI")
}

model User {
  id            String     @id @db.VarChar(255)
  firstname     String?    @db.VarChar(255)
  lastname      String?    @db.VarChar(255)
  username      String     @unique @db.VarChar(255)
  password      String     @db.VarChar(255)
  folders       Folder[] 
  files         File[]
  sharedFile    sharedFile[]

  @@map("authenticated_users")
}

model Folder {
  id            String @id @db.VarChar(255)
  private       Boolean @default(true)
  userId        String @db.VarChar(255)
  user          User  @relation(fields: [userId], references: [id])
  files         File[] 
  name          String @db.VarChar(255)
  parentId      String? @db.VarChar(255)
  parent        Folder? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders    Folder[] @relation("FolderHierarchy")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([name, userId, parentId])
  @@map("folders")
}

model File {
  id            String @id @db.VarChar(255)
  name          String @db.VarChar(255)
  size          Int
  mimetype      String @db.VarChar(100)
  url           String @db.Text // Supabase file URL
  supabasePath  String @db.Text // Path in Supabase storage
  private       Boolean @default(true)
  userId        String @db.VarChar(255)
  user          User  @relation(fields: [userId], references: [id])
  folderId      String? @db.VarChar(255)
  folder        Folder? @relation(fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sharedFile    sharedFile[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([name, userId, folderId])
  @@map("files")
}

model sharedFile {
  id            String @id @db.VarChar(255)
  link          String @unique @db.VarChar(255)
  expiryDate    DateTime @db.Timestamp(6)
  userId        String @db.VarChar(255)
  user          User  @relation(fields: [userId], references: [id])
  fileId        String @db.VarChar(255)
  file          File  @relation(fields: [fileId], references: [id])

  @@map("shared_file_links")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt   DateTime

  @@index([expiresAt])
}